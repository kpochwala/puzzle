import imageutils
import filterutils

import glob, os
from matplotlib import pyplot as plt

import numpy as np

this_script_path = os.path.dirname(os.path.realpath(__file__))
path_to_images = os.path.join(this_script_path,'./puzzle_img')
window_name = "puzzle"

def find_image_paths(path):
    images = []
    os.chdir(path)
    for file in glob.glob("*.png"):
        images.append(file)
    
    return images

@imageutils.display_transform
def select_rectangle(mat, centerpoint, rectangle_shape):
    rx = rectangle_shape[0] / 2
    ry = rectangle_shape[1] / 2

    minx = int(centerpoint[0] - rx)
    maxx = int(centerpoint[0] + rx)

    miny = int(centerpoint[1] - ry)
    maxy = int(centerpoint[1] + ry)

    # rectangle_center = rectangle_shape / (2, 2)
    
    return mat[minx:maxx,miny:maxy]
    pass

def generate_curve():
    image_paths = find_image_paths(path_to_images)

    img = imageutils.ImageShower()

    print(image_paths)

    for path in image_paths:

        image = imageutils.open_to_mat(path)

        mat = imageutils.detect_edges(image)

        poi = filterutils.pick_point_of_interest(mat)
        print("point of interest")
        print(poi)
        
        if poi is not None:
            mat = imageutils.put_marker(mat, poi)

        

        img.append_image(mat, path)

    img.show_blackwhite()


#

@imageutils.display_transform
def mask_image(original, mask):
    return original * mask

def score(mat, mask):
    if mat.shape != mask.shape:
        raise ValueError("image part must be the same size as filter kernel")

    return np.sum(mask_image(mat,mask))

    


# return an array of filter matrices with the param generated by the range
# def arrange_filters(filter_function, size, range_generator):
#     filters = []
#     for value in range_generator:
#         filters.append(filter, ))
#     pass

def main():

    filter_angles = np.arange(-90, 90, 22.5)

    size = 20

    mat = filterutils.create_rotation_filter(30, size)
    mat2 = filterutils.create_rotation_filter(60, size)
    val = score(mat, mat2)
    mat = select_rectangle(mat, (10, 10), (10, 10))

    # filters = {}
    # for angle in filter_angles:
    #     filters[angle] = filterutils.create_rotation_filter(angle, size)

    # generate_curve()
    # marker = imageutils.generate_x_marker(20);

    # image = marker

    # img.append_image(imageutils.rotate_image(image, 30), "marker")
    

if __name__ == "__main__":
    main()     

